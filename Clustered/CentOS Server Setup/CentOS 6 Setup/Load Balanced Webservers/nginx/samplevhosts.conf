### force redirect HTTP to HTTPS
server {
    listen	  80;
    server_name www.somedomain.org somedomain.org;
    rewrite	 ^   https://$server_name$request_uri? permanent;
} 









### HTTP vhost
### I set the listening port to 180 since this will be behind a load balancer
### This is more 'hiding' the real website via obscurity so users on the same
### network don't accidently find a way to go around the load balancer.
### Another way to prevent this is to block traffic that does not have the
### X-HTTP-Forwarded-For http header which would mean it was accessed directly
server {
    listen	   180;
    
    ### space-delimited list of ways your site can be accessed via a browser
    server_name  www.YOURDOMAIN.com;
    
    ### file root of your website on this server
    root /var/www/www.yourdomain.com;
    index index.php index.html;

    ### just some measures against some old fashioned attacks
    location / {
        if ($query_string ~ "base64_encode.*\(.*\)"){
            return 403;
        }
        if ($query_string ~* "(\<|%3C).*script.*(\>|%3E)"){
            return 403;
        }
        if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})"){
            return 403;
        }
        if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})"){
            return 403;
        }
    }

    location ~* \.(ico|css|js|gif|jpeg|jpg|png)$ {
        expires 7d;
    }

    ### I find the stock nginx error docs are satisfactory to me
    error_page 404 /404.html;
    location = /404.html {
	root /usr/share/nginx/html;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    ### pass the PHP scripts to php-fpm
    location ~ \.php$ {
	### this uses the phpfpm.conf upstream from another vhost file
        fastcgi_pass   phpfpm;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;
        include		fastcgi_params;
        fastcgi_param HTTPS off;
    }
}










### HTTPS vhost
### I set the listening port to 1443 since this will be behind a load balancer
### This is more 'hiding' the 'real' website as the SSL is terminated at the
### load balancer, so there is no SSL on the webserver itself and we don't want
### users on the same network to go around the load balancer.
### Another way to prevent this is to block traffic that does not have the
### X-HTTP-Forwarded-For http header which would mean it was accessed directly
server {
    listen 1443;
    
    ### space-delimited list of ways your site can be accessed via a browser
    server_name  www.YOURDOMAIN.com;
    
    ### file root of your website on this server
    root /var/www/www.yourdomain.com;
    index index.php index.html;

    ### just some measures against some old fashioned attacks
    location / {
        if ($query_string ~ "base64_encode.*\(.*\)"){
            return 403;
        }
        if ($query_string ~* "(\<|%3C).*script.*(\>|%3E)"){
            return 403;
        }
        if ($query_string ~ "GLOBALS(=|\[|\%[0-9A-Z]{0,2})"){
            return 403;
        }
        if ($query_string ~ "_REQUEST(=|\[|\%[0-9A-Z]{0,2})"){
            return 403;
        }
    }

    location ~* \.(ico|css|js|gif|jpeg|jpg|png)$ {
        expires 7d;
    }

    ### I find the stock nginx error docs are satisfactory to me
    error_page 404 /404.html;
    location = /404.html {
	root /usr/share/nginx/html;
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }

    ### pass the PHP scripts to php-fpm
    location ~ \.php$ {
	### this uses the phpfpm.conf upstream from another vhost file
        fastcgi_pass   phpfpm;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;
        include		fastcgi_params;
        fastcgi_param HTTPS on;
    }
}