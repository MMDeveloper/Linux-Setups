### Now we're going to create HHVM's config file
### Be sure to set hhvm.server.thread_count to twice the number of CPU cores that machine has
vim /etc/hhvm/server.ini

[date]
date.timezone = America/New_York

[php]
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT & ~E_NOTICE
disable_functions = _getppid, apache_child_terminate, apache_setenv, define_syslog_variables, diskfreespace, dl, escapeshellarg, escapeshellcmd, eval, fp, fpaththru, fput, ftp_connect, ftp_exec, ftp_get, ftp_login, ftp_nb_fput, ftp_put, ftp_raw, ftp_rawlist, highlight_file, ignore_user_abord, ini_alter, ini_get_all, ini_restore, inject_code, leak, link, listen, mysql_pconnect, openlog, passthru, pcntl_exec, phpAds_XmlRpc, phpAds_remoteInfo, phpAds_xmlrpcDecode, phpAds_xmlrpcEncode, php_uname, popen, posix, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_close, proc_get_status, proc_nice, proc_open, proc_terminate, set_time_limit, shell_exec, show_source, socket_accept, socket_bind, socket_clear_error, socket_close, socket_connect source, syslog, system, tmpfile, virtual, xmlrpc_entity_decode

[hhvm]
hhvm.server.user = nginx
hhvm.server.type = fastcgi
hhvm.server.file_socket = /var/run/hhvm/sock
hhvm.server.thread_count = 8
hhvm.pid_file = /var/run/hhvm/pid
 
hhvm.server.apc.enable_apc = true
hhvm.server.apc.table_type = concurrent
hhvm.server.apc.expire_on_sets = true
hhvm.server.apc.purge_frequency = 4096
 
hhvm.eval.jit = true
hhvm.eval.jit_warmup_requests = 50
 
hhvm.log.level = Error
hhvm.log.no_silencer = true
hhvm.log.always_log_unhandled_exceptions = true
hhvm.log.runtime_error_reporting_level = 8191
hhvm.log.use_log_file = true
hhvm.log.use_syslog = false
hhvm.log.injected_stack_trace = true
hhvm.log.native_stack_trace = true
hhvm.log.file = /var/log/hhvm/error.log
hhvm.log.access.*.file = /var/log/hhvm/access.log
 
hhvm.error_handling.call_user_handler_on_fatals = true
hhvm.error_handling.max_loop_count = 0
hhvm.error_handling.no_infinite_recursion_detection = false
hhvm.error_handling.throw_bad_type_exceptions = false
hhvm.error_handling.throw_too_many_arguments = false
hhvm.error_handling.warn_too_many_arguments = false
hhvm.error_handling.throw_missing_arguments = false
hhvm.error_handling.throw_invalid_arguments = false
hhvm.error_handling.enable_hip_hop_errors = true
hhvm.error_handling.notice_frequency = 1
hhvm.error_handling.warning_frequency = 1
hhvm.error_handling.assert_active = false
hhvm.error_handling.assert_warning = false
 
hhvm.debug.full_backtrace = true
hhvm.debug.server_stack_trace = true
hhvm.debug.server_error_message = true
hhvm.debug.translate_source = true
hhvm.debug.record_input = false
hhvm.debug.clear_input_on_success = true
hhvm.debug.profiler_output_dir = /tmp
 
hhvm.repo.central.path = /var/log/hhvm/.hhvm.hhbc






### Now restart hhvm
systemctl restart hhvm
systemctl status hhvm


### Now configure NGINX to pass php scripts to the hhvm socket
location ~ \.php$ {
    fastcgi_pass   unix:/var/run/hhvm/sock;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;
    include fastcgi_params;
    fastcgi_param HTTPS off;
}