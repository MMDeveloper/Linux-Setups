### This will declare a frontend for receiving HTTP traffic over port 80
frontend http-in 
...
    
    ### These throttling options will need to be tweaked to their environment
    ### These will inspect the traffic from the visitor over the last 10 seconds
    ### It will apply a custom HTTP header if any of the thresholds are met
    stick-table type ip size 100k expire 30s store conn_cur,conn_rate(10s),http_req_rate(10s),http_err_rate(10s)
    # Reject if client has more than X concurrent connections
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]active-connections, if { src_conn_cur ge 100 }
    # Reject if client has passed the HTTP connection rate
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]connection-rate, if { src_conn_rate ge 300 }
    # Reject if client has passed the HTTP error rate
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]error-rate, if { sc0_http_err_rate() gt 100 }
    # Reject if client has passed the HTTP request rate
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]request-rate, if { sc0_http_req_rate() gt 300 }
    tcp-request connection track-sc0 src
    ###

    ### This will apply an ACL if the custom HTTP header is present
    ### This means there has been too much traffic from this person
    acl use_be_slowdown_chump req.fhdr(X-Haproxy-Throttle) -m found

    ### Use the "slowdown_chump" backend if the ACL is triggered, else
    ### fallback to the "real" backend
    use_backend be_slowdown_chump if use_be_slowdown_chump
    default_backend be_webfarm0_80

    
### This will declare a frontend for receiving HTTPS traffic over port 443
frontend https-in

    ### This config is in favor of SSL termination. That way ANY webserver or 
    ### webapp behind this load balancer is automatically protected by SSL if 
    ### the app so chooses to use it. Here I specify to ONLY use perfect-forward-secrecy
    ### SSL ciphers for security with strong ciphers for backwards compatibility
    bind :443 ssl crt /etc/haproxy/ssl/server.pem ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4 no-sslv3
    
    ### These throttling options will need to be tweaked to their environment
    ### These will inspect the traffic from the visitor over the last 10 seconds
    ### It will apply a custom HTTP header if any of the thresholds are met
    stick-table type ip size 100k expire 30s store conn_cur,conn_rate(10s),http_req_rate(10s),http_err_rate(10s)
    # Reject if client has more than X concurrent connections
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]active-connections, if { src_conn_cur ge 100 }
    # Reject if client has passed the HTTP connection rate
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]connection-rate, if { src_conn_rate ge 300 }
    # Reject if client has passed the HTTP error rate
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]error-rate, if { sc0_http_err_rate() gt 100 }
    # Reject if client has passed the HTTP request rate
    http-request add-header X-Haproxy-Throttle %[req.fhdr(X-Haproxy-Throttle,-1)]request-rate, if { sc0_http_req_rate() gt 300 }
    tcp-request connection track-sc0 src
    ###
    
    ### This adds a header solely for NGINX's benefit
    reqadd X-Forwarded-Proto:\ https
    
    ### This tells the browser to ONLY communicate with this website via SSL
    ### and to remember this for one year. This will prevent SSL degredation attacks
    rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubDomains

    ### This will apply an ACL if the custom HTTP header is present
    ### This means there has been too much traffic from this person
    acl use_be_slowdown_chump req.fhdr(X-Haproxy-Throttle) -m found

    ### Use the "slowdown_chump" backend if the ACL is triggered, else
    ### fallback to the "real" backend
    use_backend be_slowdown_chump if use_be_slowdown_chump
    default_backend be_webfarm0_443

### This will declare a frontend for receiving LDAPS traffic over port 636
### You can specify your LDAP servers and how you want to weight/distribute the traffic to them.
### Take note that my configuration will only allow talk via LDAPS and not standard LDAP
frontend ldaps-in
    bind :636
    mode tcp
    option tcplog
    use_backend be_ldapservers

    
### This will declare a frontend for receiving MariaDB/MySQL traffic
### I suffix the frontend name and listening port with a zero
### to support any future expansion to additional DB pools
frontend dbfarm0
    bind :33060
    mode tcp
    option tcplog
    default_backend be_dbfarm0

    
### This will declare a standard stats/monitoring page
frontend stats
    bind 0.0.0.0:8080
    mode http
    stats enable
    stats uri /
    ### Specify a %USERNAME%:%PASSWORD% line to be used when trying to access http://LOAD-BALANCER-IP:8080/
    stats auth  admin:ASDfghJKl
    stats admin if TRUE

### This will declare a backend for the LDAPS servers
backend be_ldapservers
    mode tcp
    balance roundrobin
    option allbackups
    ### Each server line indicates an LDAP/AD server
    ### The important columns are the second and third column
    ### The second column is a unique name for that server used by HAProxy only
    ### Since this is LDAP over SSL, the third column MUST be the FQDN of the LDAP/AD server
    server DC01 DC01.fqdn.com:636 check inter 5s weight 2 rise 3
    server DC02 DC02.fqdn.com:636 check inter 5s weight 2 rise 3
    server DC03 DC03.fqdn.com:636 check inter 5s weight 1 rise 3 backup
    server DC04 DC04.fqdn.com:636 check inter 5s weight 1 rise 3 backup


backend be_webfarm0_80
    mode http
    balance roundrobin
    option redispatch
    option forwardfor
    option http-server-close
    
    ### Same as the LDAP servers except column 3 can be IP addresses of the webservers serving HTTP content
    server web1 192.168.1.1:180 check inter 4s weight 1 rise 3
    server web2 192.168.1.2:180 check inter 4s weight 1 rise 3

backend be_webfarm0_443
    mode http
    balance roundrobin
    option redispatch
    option forwardfor
    option http-server-close
    
    ### Same as the LDAP servers except column 3 can be IP addresses of the webservers serving HTTPS content
    server web1 192.168.1.1:1443 check inter 3s weight 1 rise 3
    server web2 192.168.1.2:1443 check inter 3s weight 1 rise 3

backend be_dbfarm0
    mode tcp
    balance roundrobin
    option tcplog
    option tcpka
    option mysql-check user haproxy_check
    
    ### Same as the LDAP servers except column 3 can be IP addresses of the Galera DB servers
    ### The last server has a lower weight (receives less traffic) because it was physically offsite
    ### and the response times to that box weren't as fast as the others
    server db0 192.168.3.1:3306 check inter 5s weight 2 rise 8
    server db1 192.168.3.2:3306 check inter 5s weight 2 rise 8
    server db2 192.168.3.3:3306 check inter 5s weight 2 rise 8
    server db3 192.168.3.4:3306 check inter 5s weight 1 rise 8


### This is the backend a user is sent to if they
### flood your load balancer with too much traffic
### It spits out a small error message and essentially "bans"
### them from receiving content for 15 seconds
### This is your second line of defense against an DDOS attack as your network firewall should be your first.
backend be_slowdown_chump
    mode http
    timeout tarpit 15s
    errorfile 503 /usr/share/haproxy/ratelimit.http
    errorfile 504 /usr/share/haproxy/ratelimit.http 
